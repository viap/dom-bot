/* eslint-disable @typescript-eslint/no-explicit-any */
// NOTICE: generated by command next line
// npx -p typescript tsc "./node_modules/telegram-inline-calendar/src/Calendar.js" --declaration --allowJs --emitDeclarationOnly --outDir "./src/common"

declare module "telegram-inline-calendar" {
  type CalendarOptions = Partial<{
    date_format: string // 'YYYY-MM-DD',                     // Datetime result format
    language: string // 'en',                                // Language (en/es/de/es/fr/it/tr/id)
    bot_api: string // 'node-telegram-bot-api',              // Telegram bot library
    close_calendar: boolean // true,                         // Close calendar after date selection
    start_week_day: number // 0,                             // First day of the week(Sunday - `0`, Monday - `1`, Tuesday - `2` and so on)
    time_selector_mod: boolean // false,                     // Enable time selection after a date is selected.
    time_range: string // "00:00-23:59",                     // Allowed time range in "HH:mm-HH:mm" format
    time_step: string // "30m",                              // Time step in the format "<Time step><m | h>"
    start_date: boolean | string // false,                   // Minimum date of the calendar in the format "YYYY-MM-DD" or "YYYY-MM-DD HH:mm" or "now"
    stop_date: boolean | string // false,                    // Maximum date of the calendar in the format "YYYY-MM-DD" or "YYYY-MM-DD HH:mm" or "now"
    custom_start_msg: boolean | string // false,             // Text of the message sent with the calendar/time selector
    lock_date: boolean // false,                             // Enable blocked dates list
    lock_datetime: boolean // false                          // Enable list of blocked dates and times
  }>

  class Calendar {
    constructor(bot?: any, options?: CalendarOptions)
    options: any
    lock_datetime_array: any[]
    lock_date_array: any[]
    bot: boolean
    chats: Map<any, any>
    NodeTelegramBotApi: {
      editMessageReplyMarkupCalendar(date: any, query: any): void
      editMessageReplyMarkupTime(
        date: any,
        query: any,
        from_calendar: any
      ): void
      sendMessageCalendar(menu: any, msg: any): void
      sendMessageTime(menu: any, msg: any): void
      deleteMessage(query: any): void
      replyMarkupObject(cnk: any): {
        reply_markup: any
      }
      clickButtonCalendar(query: any): number
      startNavCalendar(msg: any): void
      startTimeSelector(msg: any): void
    }
    Telegraf: {
      editMessageReplyMarkupCalendar(date: any, ctx: any): void
      editMessageReplyMarkupTime(date: any, ctx: any, from_calendar: any): void
      sendMessageCalendar(menu: any, ctx: any): void
      sendMessageTime(menu: any, ctx: any): void
      deleteMessage(ctx: any): void
      replyMarkupObject(cnk: any): {
        reply_markup: any
      }
      clickButtonCalendar(ctx: any): number
      startNavCalendar(ctx: any): void
      startTimeSelector(ctx: any): void
    }
    Telebot: {
      editMessageReplyMarkupCalendar(date: any, query: any): void
      editMessageReplyMarkupTime(
        date: any,
        query: any,
        from_calendar: any
      ): void
      sendMessageCalendar(menu: any, msg: any): void
      sendMessageTime(menu: any, msg: any): void
      deleteMessage(query: any): void
      replyMarkupObject(cnk: any): {
        replyMarkup: any
      }
    }
    Grammy: {
      editMessageReplyMarkupCalendar(date: any, ctx: any): void
      editMessageReplyMarkupTime(date: any, ctx: any, from_calendar: any): void
      sendMessageCalendar(menu: any, ctx: any): void
      sendMessageTime(menu: any, ctx: any): void
      deleteMessage(ctx: any): void
      replyMarkupObject(cnk: any): {
        reply_markup: any
      }
    }
    DatetimeFunc: {
      withoutLockDatetime(stop: any, datetime: any, type: any): boolean
      withLockDatetime(stop: any, datetime: any, type: any): boolean
    }
    DateFunc: {
      withoutLockDate(date: any, d: any): boolean
      withLockDate(date: any, d: any): boolean
    }
    addCustomStartMsg(): void
    libraryInitialization(): void
    editMessageReplyMarkupCalendar:
      | ((date: any, query: any) => void)
      | ((date: any, ctx: any) => void)
      | ((date: any, query: any) => void)
      | ((date: any, ctx: any) => void)
    editMessageReplyMarkupTime:
      | ((date: any, query: any, from_calendar: any) => void)
      | ((date: any, ctx: any, from_calendar: any) => void)
      | ((date: any, query: any, from_calendar: any) => void)
      | ((date: any, ctx: any, from_calendar: any) => void)
    sendMessageCalendar:
      | ((menu: any, msg: any) => void)
      | ((menu: any, ctx: any) => void)
      | ((menu: any, msg: any) => void)
      | ((menu: any, ctx: any) => void)
    sendMessageTime:
      | ((menu: any, msg: any) => void)
      | ((menu: any, ctx: any) => void)
      | ((menu: any, msg: any) => void)
      | ((menu: any, ctx: any) => void)
    deleteMessage:
      | ((query: any) => void)
      | ((ctx: any) => void)
      | ((query: any) => void)
      | ((ctx: any) => void)
    replyMarkupObject:
      | ((cnk: any) => {
          reply_markup: any
        })
      | ((cnk: any) => {
          reply_markup: any
        })
      | ((cnk: any) => {
          replyMarkup: any
        })
      | ((cnk: any) => {
          reply_markup: any
        })
    clickButtonCalendar: ((query: any) => number) | ((ctx: any) => number)
    startNavCalendar: ((msg: any) => void) | ((ctx: any) => void)
    startTimeSelector: ((msg: any) => void) | ((ctx: any) => void)
    dateFuncInitialization(): void
    checkDate:
      | ((date: any, d: any) => boolean)
      | ((date: any, d: any) => boolean)
    datetimeFuncInitialization(): void
    checkDatetime:
      | ((stop: any, datetime: any, type: any) => boolean)
      | ((stop: any, datetime: any, type: any) => boolean)
    weekDaysButtons(day: any): any
    startWeekDay(day: any): number
    twoDigits(num: any): any
    colRowNavigation(date: any, cd: any): number
    howMuchDays(year: any, month: any): number
    createTimeSelector(
      date?: string,
      from_calendar?: boolean
    ): {
      resize_keyboard: boolean
      inline_keyboard: any[]
    }
    createNavigationKeyboard(date: any): {
      resize_keyboard: boolean
      inline_keyboard: any[]
    }
  }

  export interface classes {
    CalendarOptions: CalendarOptions
    Calendar: Calendar
  }
}
